/*
53. 最大子数组和
给你一个整数数组 nums ，请你找出一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。
子数组 是数组中的一个连续部分。


示例 1：
输入：nums = [-2,1,-3,4,-1,2,1,-5,4]
输出：6
解释：连续子数组 [4,-1,2,1] 的和最大，为 6 。

示例 2：
输入：nums = [1]
输出：1


思路一
暴力：找出所有的连续子数组，计算和，选其中最大的。遍历每个元素做为开头，其他元素作为结束，一共n*n个

思路二
倒序看，从头遍历的时候，每个元素做为结尾，这个点前的元素即为其所有可能的开头
-2

1结尾的
-2 1
   1

-3结尾的
-2 1 -3
   1 -3
     -3

以某个元素结尾的所有连续子数组，是以上一个元素为结尾的所有子数组，都追加上当前元素
因此，以某个元素结尾的所有连续子数组中，最大和有2种情况
1.以前一个元素结尾的最大和如果大于0，那么当前元素结尾的最大和，即是以前一个为结尾的最大和+当前元素
2.小于0，则当前元素这一个元素，即为以当前元素结尾的子数组中最大和
*/

package maxSubArray

func maxSubArray(nums []int) int {
	if len(nums) == 0 {
		return 0
	}

	max := nums[0]
	maxCurrent := nums[0]
	for i := 1; i < len(nums); i++ {
		if maxCurrent > 0 {
			maxCurrent = maxCurrent + nums[i]
		} else {
			maxCurrent = nums[i]
		}

		if maxCurrent > max {
			max = maxCurrent
		}
	}

	return max
}
